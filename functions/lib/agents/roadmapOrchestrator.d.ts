import { Firestore } from '@google-cloud/firestore';
import { MessageRouter } from '../core/messageRouter';
import { StrategicSummary, User } from '../models/types';
import { Logger } from '../utils/logger';
export declare class RoadmapOrchestrator {
    private db;
    private messageRouter;
    private logger;
    private gemini;
    private model;
    private currentRoadmap;
    private updateInterval;
    constructor(db: Firestore, messageRouter: MessageRouter, logger: Logger);
    private initialize;
    private setupMessageHandlers;
    private startContinuousOrchestration;
    createInitialRoadmap(): Promise<void>;
    handleNewUser(user: User): Promise<void>;
    handleUserDeparture(userId: string): Promise<void>;
    incorporateStrategicSummary(summary: StrategicSummary): Promise<void>;
    updateRoadmap(): Promise<void>;
    distributeTasksToUsers(): Promise<void>;
    private notifyAllAgents;
    private getAllUsers;
    private getActiveUsers;
    private getUserTaskCount;
    private findUserTasks;
    private getProjectScope;
    private getCurrentProgress;
    private getActiveIssues;
    private getElapsedTime;
    private saveRoadmap;
    private applyRoadmapUpdates;
    private redistributeTasks;
    private updateTaskAssignment;
    private notifyAffectedUsers;
    private generateRoadmapSummary;
    private identifyCriticalPath;
    private identifyCriticalTasks;
    private calculateEstimatedCompletion;
    private calculateDeadline;
    private mapPriorityToNumber;
    private handleRoadmapUpdateRequest;
    private applyStrategicAdjustments;
    private updateTaskPriorities;
    private reallocateResources;
    private adjustTimelines;
    cleanup(): void;
}
